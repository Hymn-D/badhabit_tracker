Absolutely ✅ — here’s a professional **`README.md`** you can use for your **Bad Habit Tracker Django API (Week 1: Setup & Core Models)**.
It includes setup instructions, API structure, and documentation for all endpoints you’ve implemented so far.

---

```markdown
# 🧠 Bad Habit Tracker API (Week 1)

A Django REST Framework-based API that helps users **identify**, **track**, and **replace** bad habits.  
This is **Week 1** of the project — focusing on core setup, authentication, and habit management models.

---

## 🚀 Week 1 Goals

- ✅ Setup Django project & app structure  
- ✅ Implement user authentication (register/login/logout with JWT)  
- ✅ Build core models:
  - Habit  
  - HabitLog  
  - ReplacementPlan  
  - Reminder  
  - JournalEntry  
  - Achievement  

---

## 📁 Project Structure

```

badhabit_tracker/
│
├── badhabit_tracker/         # Project settings
│   ├── settings.py
│   ├── urls.py
│   └── ...
│
├── habits/                   # Core app
│   ├── models.py
│   ├── views.py
│   ├── serializers.py
│   ├── urls.py
│   ├── permissions.py
│   └── ...
│
└── manage.py

````

---

## ⚙️ Installation & Setup

### 1️⃣ Create and activate a virtual environment

```bash
python -m venv venv
venv\Scripts\activate      # Windows
# or
source venv/bin/activate   # macOS/Linux
````

### 2️⃣ Install dependencies

```bash
pip install django djangorestframework djangorestframework-simplejwt
```

### 3️⃣ Start a new Django project (if not already done)

```bash
django-admin startproject badhabit_tracker
cd badhabit_tracker
python manage.py startapp habits
```

### 4️⃣ Add apps to `INSTALLED_APPS` in `badhabit_tracker/settings.py`

```python
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'habits',
]
```

### 5️⃣ Configure REST Framework & JWT (in `settings.py`)

```python
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}
```

### 6️⃣ Apply migrations and create superuser

```bash
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
```

### 7️⃣ Run the server

```bash
python manage.py runserver
```

---

## 🧑‍💻 API Documentation

### 🔐 Authentication

| Endpoint              | Method | Description              |
| --------------------- | ------ | ------------------------ |
| `/api/auth/register/` | `POST` | Register new user        |
| `/api/auth/login/`    | `POST` | Login and get JWT tokens |
| `/api/auth/logout/`   | `POST` | Logout user              |

**Request Example (register):**

```json
{
  "username": "junia",
  "email": "junia@example.com",
  "password": "strongpassword123"
}
```

---

### 🏷️ Habits

| Endpoint            | Method   | Description                      |
| ------------------- | -------- | -------------------------------- |
| `/api/habits/`      | `GET`    | List all habits for current user |
| `/api/habits/`      | `POST`   | Create a new habit               |
| `/api/habits/{id}/` | `GET`    | Get details of a habit           |
| `/api/habits/{id}/` | `PUT`    | Update a habit                   |
| `/api/habits/{id}/` | `DELETE` | Delete a habit                   |

**Habit fields:**

```json
{
  "name": "Biting nails",
  "category": "health",
  "description": "Stop biting nails when stressed",
  "target_frequency": 7
}
```

---

### 🗓️ Habit Logs

| Endpoint                       | Method | Description         |
| ------------------------------ | ------ | ------------------- |
| `/api/habits/{habit_id}/logs/` | `GET`  | List habit logs     |
| `/api/habits/{habit_id}/logs/` | `POST` | Add a new habit log |

---

### 🔄 Replacement Plans

| Endpoint                        | Method | Description                     |
| ------------------------------- | ------ | ------------------------------- |
| `/api/habits/{habit_id}/plans/` | `GET`  | List replacement activities     |
| `/api/habits/{habit_id}/plans/` | `POST` | Create new replacement activity |

---

### ⏰ Reminders

| Endpoint                            | Method | Description       |
| ----------------------------------- | ------ | ----------------- |
| `/api/habits/{habit_id}/reminders/` | `GET`  | List reminders    |
| `/api/habits/{habit_id}/reminders/` | `POST` | Create a reminder |

---

### 📔 Journal Entries

| Endpoint        | Method | Description          |
| --------------- | ------ | -------------------- |
| `/api/journal/` | `GET`  | List journal entries |
| `/api/journal/` | `POST` | Add new entry        |

---

### 🏆 Achievements & Reports

| Endpoint                          | Method | Description               |
| --------------------------------- | ------ | ------------------------- |
| `/api/achievements/`              | `GET`  | List all achievements     |
| `/api/reports/summary/`           | `GET`  | User progress summary     |
| `/api/reports/habits/{habit_id}/` | `GET`  | Detailed report per habit |

---

## 🧱 Data Model Relationships

```
User ──┬──< Habit ──┬──< HabitLog
       │             ├──< ReplacementPlan
       │             ├──< Reminder
       │             └──< JournalEntry (optional)
       ├──< JournalEntry
       └──< Achievement
```

---

## 🧰 Tech Stack

* **Backend:** Django 5 + Django REST Framework
* **Authentication:** JWT (SimpleJWT)
* **Database:** SQLite (default, can switch to PostgreSQL)
* **Language:** Python 3.12+

---

## 🧪 Testing Endpoints

Use **Postman** or **cURL** to test the API.

Example login request:

```bash
POST /api/auth/login/
Content-Type: application/json

{
  "username": "junia",
  "password": "strongpassword123"
}
```

Response:

```json
{
  "access": "your.jwt.token",
  "refresh": "your.refresh.token"
}
```

---

## 🗓️ Next Steps (Week 2 Preview)

* Add analytics & habit streak tracking
* Generate progress reports and summaries
* Add email/SMS reminders
* Build front-end dashboard (React or Vue)

---

## 👩‍💻 Author

**Junia**
Habit Tracking Project — Django REST API
© 2025 All Rights Reserved

```

---

Would you like me to generate a **`README.md` file** (so you can download and drop it into your project folder directly)?  
I can create and attach it for you automatically.
```
